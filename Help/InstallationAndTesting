// BEWARE RASA-X MODIFIES THE INTENT FILES & YOU GET WRONG INTENTS

// Linux - 
// sudo add-apt-repository ppa:jonathonf/python-3.6
// sudo apt-get update
// sudo apt-get install python3.6
// sudo apt-get install python3.6-dev // IMPORTANT
// python3.6 -m venv --system-site-packages ./venv
// source ./venv/bin/activate
// pip install -U spacy
// python -m spacy download en_core_web_md
// python -m spacy link en_core_web_md en
// pip install rasa-x --extra-index-url https://pypi.rasa.com/simple
// sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
// curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
// sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
// sudo apt-get update
// sudo apt-get install docker-ce
// docker pull rasa/duckling
// docker run -p 8000:8000 rasa/duckling
// sudo apt-get install nodejs
// sudo apt-get install nodejs-legacy
// sudo apt-get install npm
// npm i -g http-server
// http-server -a 0.0.0.0 -p 8001 -c-1 2> error.log > output.log &
// rasa run actions 2> action_error.log > action_output.log &
// rasa run -m models --enable-api --log-file out.log --cors "*" 2> core_error.log > core_output.log &
// rasa interactive -m models/<model.tar.gz> --endpoints endpoints.yml

// WINDOWS Pre-requisites Installation Guide
1. Install Python Version <= 3.6
2. Install C++ 14 Build tools (Visual Studio Community Edition 2019) (Windows only)
3. pip install rasa-x --extra-index-url https://pypi.rasa.com/simple
// Spacy
// pip install -U spacy
// python -m spacy download en_core_web_md
// python -m spacy link en_core_web_md en
// For Custom Action in Python => pip install rasa-sdk // Not Mandatory if rasa-x is installed
// For Duckling install Haskell Stack && Duckling code (ONLY IF you want Dates, Amounts of Money, Durations, Distances, Ordinals Extraction)
// https://github.com/commercialhaskell/stack/blob/master/doc/install_and_upgrade.md
// https://github.com/facebook/duckling
// For Windows Pre-Requisites
//    - duckling-master/duckling.cabal , replace "regex-pcre" with "regex-pcre-builtin"
//    - Copy "zoneinfo" folder beside the "duckling-example-exe.exe" (https://github.com/botpress/duckling/blob/8b9e4f0e0c4577a814e9f2592bb8e9df0f578b7e/windows/zoneinfo.zip)
//    - duckling-master/exe/ExampleMain.hs, replace "/usr/share/zoneinfo/" with "<full_path_to>/zoneinfo/"
//    - duckling-master/exe/Duckling/Data/TimeZone.hs, replace "System.FilePath" with "System.FilePath.Posix"
// step0: stack install // Will download Haskell
// Step1: stack build // For Windows Only if Install failed during build(https://github.com/facebook/duckling/issues/349)
// step2: stack exec duckling-example-exe
// Add the url in endpoints.yml
// For Custom Fall Back Policy // pip install antidote

// Project Setup
4. rasa init --no-prompt
License - ( C:\Users\pawanras/.config/rasa/global.yml)

// RASA Commands
rasa init	              Creates a new project with example training data, actions, and config files.
rasa train	            Trains a model using your NLU data and stories, saves trained model in ./models.
rasa interactive	      Starts an interactive learning session to create new training data by chatting.
rasa shell	            Loads your trained model and lets you talk to your assistant on the command line.
rasa run	              Starts a Rasa server with your trained model. See the Running the Server docs for details.
rasa run actions	      Starts an action server using the Rasa SDK.
rasa visualize	        Visualizes stories.
rasa test	              Tests a trained Rasa model using your test NLU data and stories.
rasa data split nlu	    Performs a split of your NLU data according to the specified percentages.
rasa data convert nlu	  Converts NLU training data between different formats.
rasa x	                Launch Rasa X locally.
rasa -h	                Shows all available commands

// Test the Data and its format Passed to RASA
5. rasa data validate

// Testing NLU
	// Via Splitting Data Set
6. rasa data split nlu && rasa test nlu -u <test_set.md> --model models/<model.tar.gz>
	// Not Splitting Data Set and Cross Validations
   rasa test nlu -u data/nlu.md --config config.yml --cross-validation

// Comparing Various Pipelines
7. rasa test nlu --config pretrained_embeddings_spacy.yml supervised_embeddings.yml
  --nlu data/nlu.md --runs 3 --percentages 0 25 50 70 90
    Results are Saved in "nlu_comparison_results" folder

    --report will generate Histogram of Success and Failed Predictions

// Named Entitiy Extraction
8. BILOU Tags are not Supported - "Beginning, Inside and Last tokens of multi-token chunks, Unit-length chunks and Outside"

// Testing Core
9. rasa test core --stories test_stories.md --out results
    Output to - results/failed_stories.md
              - results/story_confmat.pdf (Confusion Matrix)

// Run HTTP Server (Documentation - https://rasa.com/docs/rasa/api/http-api/#http-api)
10. rasa run -m models --enable-api --log-file out.log --cors "*"// Fetches Model from local machine
    rasa run --enable-api --log-file out.log --endpoints my_endpoints.yml // Fetches Model from endpoint specified

    // HTTPS
    rasa run --ssl-certificate myssl.crt --ssl-keyfile myssl.key

// Train & Test NLU
11. rasa train nlu && rasa shell nlu || rasa shell -m models/nlu-*.tar.gz
    models in (models/nlu-*.tar.gz)

    // NLU as HTTP
    rasa run --enable-api -m models/nlu-*.tar.gz 

    NLU
## intent:I
## synonym:S
## regex:R
## lookup:L
  - A
  - B
## lookup:L
path/to/lookup.txt

Usage
  [instance](class)
  [entity](entity_type)
  [entity](entity_type:S)
  [entity](R)
  [entity](L)

// NLU - Pipelines
pretrained_embeddings_spacy - for small training set
supervised_embeddings - for domain specific training set (need large training data)
  ex: "balance" in the context of "Banks" and "Symmetry" are different
// Pipeline Components
Entity extraction (CRFEntityExtractor), intent classification, response selection, pre-processing, and others

pipeline (pretrained_embeddings_spacy) 
- name: "SpacyNLP"
- name: "SpacyTokenizer"
- name: "SpacyFeaturizer"
- name: "RegexFeaturizer"
- name: "CRFEntityExtractor"
- name: "EntitySynonymMapper"
- name: "SklearnIntentClassifier"

pipeline (supervised_embeddings)
- name: "WhitespaceTokenizer"
- name: "RegexFeaturizer"
- name: "CRFEntityExtractor"
- name: "EntitySynonymMapper"
- name: "CountVectorsFeaturizer"
- name: "CountVectorsFeaturizer"
  analyzer: "char_wb"
  min_ngram: 1
  max_ngram: 4
- name: "EmbeddingIntentClassifier"

pipeline (MITIE)
- name: "MitieNLP"
  model: "data/total_word_feature_extractor.dat"
- name: "MitieTokenizer"
- name: "MitieEntityExtractor"
- name: "EntitySynonymMapper"
- name: "RegexFeaturizer"
- name: "MitieFeaturizer"
- name: "SklearnIntentClassifier"

// pretrained word vectors for multi language support
CRFEntityExtractor - Domain specific
SpacyEntityExtractor - Extracting Places, Dates, People, Organisations
DucklingHTTPExtractor - Dates, Amounts of Money, Durations, Distances, Ordinals

// Rasa Core - Dialogue Engine
// Format
## Story Description
* user_intent (input)
  - action_by_bot (output)
* user_intent1 OR user_intent2 OR user_intent3
  - action_by_bot (output)
* intent{"slot1": "value1", "slot2": "value2"}
  // - slot{"name": "abcd"} // Explicit Slot Filling
  - action_by_bot (output)
2 types of action_by_bot 
  - utterances - start with prefix utter_
  - custom action

// Domain.yml
  intents:
  - greet
  entities:
  - name
  slots: // custom_slots
    name:
      type: text
      initial_value: "abcd"
      // auto_fill: False // For Not Filling the slots autmatically we can fill explicitly
    is_authenticated:
      type: bool
    account_type:
      type: categorical
      values:
      - premium
      - basic
    temperature:
      type: float
      min_value: -100.0
      max_value:  100.0
    shopping_items:
      type: list
    internal_user_id: // Values of this type doesnot influence dialouge flow
      type: unfeaturized
  forms: // Used to fill required_solts to make an action
    - <form_name>
    // In Sotries 
    // ## happy path
    // * request_restaurant
    //     - restaurant_form
    //     - form{"name": "restaurant_form"} // Activate Form
    //     - form{"name": null} // Deactivate Form
  actions: // custom_actions
    - utter_default
  templates:
    utter_greet:
      text: "hey there {name}!"

  // Custom Action inherit "from from rasa_sdk.actions import Action"
  // Must run a Separate Server for Actions && Register the end points in "endpoints.yml"
  // rasa run actions
  // endpoints.yml
  action_endpoint:
    url: "http://localhost:5055/webhook"
  // actions.py
  class X(Action):
    def name:: self -> string // action_description for debugging
    def run:: (self, dispatcher, tracker, domain) -> []
      // register so we can use in templates
      dispatcher.utter_template("utter_abcd", tracker)

  // Variations, Images, Buttons & Custom Payload in Template 
  templates:
    utter_greeting: // Variations in Responses
    - text: "Hey, {name}. How are you?" // {name} is variable and filled dynamically from slots
    - text: "Hey, {name}. How is your day going?"
    utter_greet:
    - text: "Hey! How are you?"
      buttons:
      - title: "great"
        payload: "great"
        // payload: '/intent{"entity": "value"}' // Filling Slots by clicking button
      - title: "super sad"
        payload: "super sad"
    utter_cheer_up:
    - text: "Here is something to cheer you up:"
      image: "https://i.imgur.com/nGF1K8f.jpg"
    utter_custom:
    - custom:
      // Custom Yaml ex: Send Date_picker

    // Ignore Entities for Certain intents
    intents:
    - greet:
        use_entities:
          - name
          - first_name
        ignore_entities: // Will not affect next action
          - location
          - age

// Policies -> Config.yml
MAX_NUMBER_OF_PREDICTIONS 
MAX_HISTIRY in conversations

// Slots => Bots Memory
// Slots are not specific except categorical & bool slots

